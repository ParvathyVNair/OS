#include <stdio.h>

// FIFO Page Replacement Algorithm
void fifo(int numPages, int pageStream[numPages], int numFrames) {
    int pageTable[numFrames]; // Initialize page table with -1
    for (int i = 0; i < numFrames; i++) {
        pageTable[i] = -1;
    }

    int pageFaults = 0;
    printf("FIFO Page Replacement Algorithm:\n");
    printf("Inc\t");
    for (int i = 1; i <= numFrames; i++) {
        printf("F%d\t", i);
    }
    printf("\n");

    int pageTableIndex = 0;
    for (int i = 0; i < numPages; i++) {
        int page = pageStream[i];
        int hit = 0;
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == page) { // Page hit
                hit = 1;
                break;
            }
        }

        if (hit) { // No page fault, do nothing
        } else { // Page fault, add the page to the page table
            pageFaults++;
            pageTable[pageTableIndex] = page;
            pageTableIndex = (pageTableIndex + 1) % numFrames;
        }

        printf("%d\t", page);
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == -1) {
                printf("-\t");
            } else {
                printf("%d\t", pageTable[j]);
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

// LFU Page Replacement Algorithm
void lfu(int numPages, int pageStream[numPages], int numFrames) {
    int pageTable[numFrames]; // Initialize page table with -1
    int pageCount[numFrames]; // Keep track of the number of times each page was accessed
    for (int i = 0; i < numFrames; i++) {
        pageTable[i] = -1;
        pageCount[i] = 0;
    }

    int pageFaults = 0;
    printf("LFU Page Replacement Algorithm:\n");
    printf("Inc\t");
    for (int i = 0; i < numFrames; i++) {
        printf("F%d\t", i + 1);
    }
    printf("\n");

    for (int i = 0; i < numPages; i++) {
        int page = pageStream[i];
        int hit = 0;
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == page) {
                hit = 1; // Page hit
                pageCount[j]++; // Increment the page access count
                break;
            }
        }

        if (hit) { // No page fault, do nothing
        } else { // Page fault, add the page to the page table using LFU page replacement algorithm
            pageFaults++;
            int lfuIndex = 0;
            for (int j = 0; j < numFrames; j++) {
                if (pageTable[j] == -1) {
                    lfuIndex = j; // If there is a free frame, use it for replacement
                    break;
                }
                if (pageCount[j] < pageCount[lfuIndex]) {
                    lfuIndex = j; // Find the least frequently used page for replacement
                }
            }
            pageTable[lfuIndex] = page; // Replace the least frequently used page with the incoming page
            pageCount[lfuIndex] = 1; // Reset the page access count
        }

        printf("%d\t", page);
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == -1) {
                printf("-\t");
            } else {
                printf("%d\t", pageTable[j]);
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

// LRU Page Replacement Algorithm
void lru(int numPages, int pageStream[numPages], int numFrames) {
    int pageTable[numFrames]; // Initialize page table with -1
    for (int i = 0; i < numFrames; i++) {
        pageTable[i] = -1;
    }

    int pageFaults = 0;
    printf("LRU Page Replacement Algorithm:\n");
    printf("Inc\t");
    for (int i = 1; i <= numFrames; i++) {
        printf("F%d\t", i);
    }
    printf("\n");

    int pageTableIndex = 0;
    int pageAccesses[numFrames];
    for (int i = 0; i < numFrames; i++) {
        pageAccesses[i] = 0;
    }
    for (int i = 0; i < numPages; i++) {
        int page = pageStream[i];
        int hit = 0;
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == page) { // Page hit
                hit = 1;
                pageAccesses[j]++;
                break;
            }
        }

        if (hit) { // No page fault, do nothing
        } else { // Page fault, add the page to the page table using LRU page replacement algorithm
            pageFaults++;
            int lruIndex = 0;
            for (int j = 0; j < numFrames; j++) {
                if (pageTable[j] == -1) {
                    lruIndex = j; // If there is a free frame, use it for replacement
                    break;
                }
                if (pageAccesses[j] < pageAccesses[lruIndex]) {
                    lruIndex = j; // Find the least recently used page for replacement
                }
            }

            pageTable[lruIndex] = page; // Replace the least recently used page with the incoming page
            pageAccesses[lruIndex] = 1; // Reset the page access count
        }

        printf("%d\t", page);
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == -1) {
                printf("-\t");
            } else {
                printf("%d\t", pageTable[j]);
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);
}

int main() {
    printf("Enter the number of pages: ");
    int numPages;
    scanf("%d", &numPages);

    int pageStream[numPages];
    printf("Enter the incoming streams\n");
    for (int i = 0; i < numPages; i++) {
        scanf("%d", &pageStream[i]);
    }

    printf("Enter the number of frames: ");
    int numFrames;
    scanf("%d", &numFrames);

    fifo(numPages, pageStream, numFrames);
    lfu(numPages, pageStream, numFrames);
    lru(numPages, pageStream, numFrames);

    return 0;
}
