#include <stdio.h>

int main() {
    printf("Enter the number of pages: ");
    int numPages;
    scanf("%d", &numPages);

    int pageStream[numPages];
    printf("Enter the incoming streams\n");
    for (int i = 0; i < numPages; i++)
        scanf("%d", &pageStream[i]);

    printf("Enter the number of frames: ");
    int numFrames;
    scanf("%d", &numFrames);

    int pageTable[numFrames]; // Initialize page table with -1
    int pageCount[numFrames]; // Keep track of the number of times each page was accessed
    for (int i = 0; i < numFrames; i++) {
        pageTable[i] = -1;
        pageCount[i] = 0;
    }

    int pageFaults = 0;

    printf("Inc\t");
    for (int i = 0; i < numFrames; i++)
        printf("F%d\t", i + 1);
    printf("\n");

    for (int i = 0; i < numPages; i++) {
        int page = pageStream[i];
        int hit = 0;

        // Check if the page is already present in the page table
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == page) {
                hit = 1; // Page hit
                pageCount[j]++; // Increment the page access count
                break;
            }
        }

        if (hit) {
            // No page fault, do nothing
        } else {
            pageFaults++; // Increase page fault count, as the page is not present in memory

            // Find the index for replacement using LFU page replacement algorithm
            int lfuIndex = 0;
            for (int j = 0; j < numFrames; j++) {
                if (pageTable[j] == -1) {
                    lfuIndex = j; // If there is a free frame, use it for replacement
                    break;
                }
                if (pageCount[j] < pageCount[lfuIndex]) {
                    lfuIndex = j; // Find the least frequently used page for replacement
                }
            }

            pageTable[lfuIndex] = page; // Replace the least frequently used page with the incoming page
            pageCount[lfuIndex] = 1; // Reset the page access count
        }

        // Printing the current state of the page table after processing the incoming page
        printf("%d\t", page);
        for (int j = 0; j < numFrames; j++) {
            if (pageTable[j] == -1) {
                printf("-\t"); // Print '-' for an empty frame
            } else {
                printf("%d\t", pageTable[j]); // Print the page number in the frame
            }
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", pageFaults);

    return 0;
}
